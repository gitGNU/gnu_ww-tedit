WW is a programmer's text editor. It features small
memory and disk requirements, syntax highlighting, multiple simultaneous file
editing, and more. It can be compiled for Linux / Unix (text console), and
GUI emulated console for X and MS Windows.

...CONTENTS...
NEWS
How to build for Windows
How to build for Linux
How to build Doxygen documentation
Tips for using WW on a text terminal
TODO
..............


NEWS for last 3 builds
----------------------
--- version 0.2.3 build TO BE 51 ---
+ using git for version control
+ new disp module, new API, completely reimplemented
+ se doxygen for code documentation
+ new keybindings for text terminals, improved ergonomics
. [bug #11532] bad autoindent
+ (on a branch) using scons for building and cross building
+ (on a branch) deb package

--- version 0.2.3 build 50 --- [ 2006-02-14 ]
. [bug #15293] option UseTabs has no effect when turned off
. X GUI: window didn't show correct title
+ resize in X11 version, maximize, restore
. [bug #15192] wglob.ini always created in the current directory

--- version 0.2.3 build 49 --- [ 2006-01-01 ]
. [bug #11337] Win32 GUI: window is resizable
+ resize in Win32 GUI
. [bug #14871] Makefile: the build fails mysteriously if output
  directories don't exist
. [bug #14870] Makefile: the X and console versions have the same
  name & directory
. [bug #14869] The X version cannot be compiled with static libraries

--- version 0.2.3 build 48 --- [ 2005-10-25 ]
. [bug #13445] Linux/X: Reverse quote doesn't work
+ free type fonts (xft) in X
. [bug #13250] Clipboard doesn't work in X
. [bug #12067] fix tab/shift+tab in linux text console and
  other key bindings
. [bug #12743] console version read_kbd craps out in the middle
  of ESC-seq
. [bug #13484] search with options (-i, -b) doesn't work
. [bug #13489] search beyond last occurence fails
. [bug #13491] search with "-b" must jump on the previous if current
  pos matches
. [bug #13508] on solaris xterm, backspace is unrecognized]
. [bug #13517] another failing search
+ imroved kaydefs for xterm
. [bug #12309] mark-to-end-of-word is incorrect
. [bug #12311] CheckDocumentTypeSet() fails when plug-in activated
. [bug #12196] user bookmarks navigations doesn't work
+ stricter heap validation on Windows
. {crash} saving bookmarks to .ini file fails
. [bug #12275] {crash} two copys of a file in memory and bookmarks
. [bug #12745] when wglob.ini is edited, don't store global cfg


How to build for Windows
------------------------
Open a cmd.exe prompt. To setup the command line envyronment, execute
vcvars32.bat from msdev\bin.

Create directoriy for the debug binaries, ww_guiemu_dbg. Make it current
so that the source is in ../src. From there execute

`cmake -G "NMake Makefiles" ..'

This creates makefile for nmake. To build after that, only type `nmake'.


How to build for Linux
----------------------
Create directoriy for the debug binaries, ww_ncurs_dbg. Make it current
so that the source is in ../src. From there execute

`cmake -G  "Unix Makefiles" ..'

This creates makefile for GNU make. To build after that, only type `make'.


How to build Doxygen documentation
----------------------------------
`Doxyfile' is the configuration for Doxygen. Inside 'Doxyfile' search for
`# *' to find all marked comment sections of the options that were changed
from the default.

To generate the documentation from within the top directory, so that src is
a subdirectory of the current directory, execute:

`doxygen'

API documentation of the modules is generated in doxy/html.


Tips for using WW in a text terminal
------------------------------------
When running WW in a text terminal most of the CUI key combinations are not
working. For example the arrow keys work but for shift+arrow combination the
terminal is usually not emitting any distinctive key sequence making many
editor functions unaccessible. To invoke those unreachable functions
on such terminals a new alternative set of key bindings was put together.

Frequently used editor functions are assigned to 'ctrl' combinations.

ctrl+e -- enters text selection mode. Use arrow keys, or any other navigation
function to specify the range of selected text. After that any block
manipulation operation will use the current selection and will also
end the mode. For example, to copy text, start with ctrl+e,
use arrows to select, and to copy press ctrl+c, this will put the text in the
clipboard and at the same time end the selection mode.

ctrl+l -- find next. This is F3 but this key doesn't work on many terminals.
ctrl+d, l -- find next searching backward. Same as Shift+F3.

NEEDS MORE WORK!

Many of the 'shift' key combinations are replaced by key sequences starting
with ctrl+d.

Incremental search is ctrl+i. In the alternative set it is ctrl+d, i

(old)

There are different levels of limitations depending on the terminal emulation
The best terminal emulation is xterm, it transmits most of the useful key
combinations. Every other terminal is with varying degree of limitations.

-- If Alt combinations doesn't work, use ESC to invoke menu, then
   two or three shortcut letter. For example search function is `Esc,s,u'
-- Ctrl+tab doesn't work, use Ctrl+F6 to switch between the top two files
-- To switch among other files use atl+0 or Alt+W
-- If ctrl+F6 doesn't work, use the equivalent `Alt+W,2'
-- Shift+arrors must work in xterm, if it doesn't then use F8
-- `Ctrl+K,b', `Ctrl+k,k' also works for selections
-- Ctrl+Shift+F8 must work to switch to column blocks, if it doesn't
   then use `Ctrl+k,n'
-- To indent blocks use Tab as usual, to unindent use Ctrl+k-u


TODO
----

SHORT-TERM:
* handle resize signal for ncurses
* remove most of VALIDATE_HEAP_PTR and VALIDATE_HEAP, which were put temporarely
* highlight pairs of () and []
* ctrl+] : goto matching pair
* ctrl+[ : goto to the { or current level - 1
* Indent/Unindent block should work even if block is hidden
* in X Read fron from the .ini, like in the Windows GUI
* in gui_scr and x_scr and elsewhere fix the buf[255] to be bigger/smarter!
* ini2.c, when writing .ini files, check that no section is written
  if no changes were made on any of the options; this is necessary to permit
  for more than one editor to store .ini files on exit
* when resizing the screen make the file status line show the width and
  the height of the file area, the format should be WxH instead of
  row:col
* prepare native palette for text console in putty, redo the way palettes
  are maintained to permit italics and bolds for comments and highlights
* add the thwrap multithread library
* refactor display and keyboard into separate module (library)
* EVENT_KEY is too big, move out from HandleFileViewEvents (fview.c)
* establish min size (use MSG_SET_MIN_SIZE)

IDEAS:
* in the .ini file add section to permit the adding of
  new ESC sequences
* Pressing <End> twice will show the current func name tooltip if not
  currently visible on the screen
* Think of highlighting TABS
* Think of highlighting SPACES at the end of the lines
* make ctrl+kz -- suspend (unix suspend), this when suspend is implemented
* ini2.c -- merge histories of files and ed lines based on a time stamp,
  this will permit that upon exit multiple editor instances would not
  overwrite eachothers data blindly

